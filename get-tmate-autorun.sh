#!/bin/bash
#!/bin/sh
set -e

LANG=C
LC_MESSAGES=C

# for better use with clusterssh
echo $0 $@

# based on Code generated by godownloader on 2019-06-13T12:03:00Z
#

# TMATEapikeyDEBUG=${TMATEapikeyDEBUG:-tmk-jPa7GdgslQuqt4PAOHxQRAyJTe}; TMATEsessionDEBUG=$(echo $TMATEapikeyDEBUG$(date -u +%F%H) | sha256sum | cut -b-50 ); ssh debugnull/$TMATEsessionDEBUG@lon1.tmate.io
#debugnull
#tmate $tmpfileCONFIG -k tmk-jPa7GdgslQuqt4PAOHxQRAyJTe -n testname -F 
##TMPsession=$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | tr -d [:space:]- )
##TMATEsession=${TMATEsession:-$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | tr -d [:space:]- )}
### https://tmate.io/t/debugnull/$TMATEsession
## ssh debugnull/$TMATEsession@lon1.tmate.io
##ssh debugnull/${TMATEsession:-$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | tr -d [:space:]- )}@lon1.tmate.io


tmpdir=
tmpdir1=
tmpdir2=
#tmpdir=${tmpdir:-$(mktemp -d -t tmp.abc-script.XXXXXXXXXX)}
tmpdir1=${tmpdir1:-$(mktemp -d -t tmp.abc-script1.XXXXXXXXXX)}
##trap "rm -fr $tmpdir1" 0 2 3 15
tmpdir2=${tmpdir2:-$(mktemp -d -t tmp.abc-script2.XXXXXXXXXX)}
##trap "rm -fr $tmpdir2" 0 2 3 15
#tmpdir1=$(mktemp -d tmp.abc-script1.XXXXXXXXXX)
#tmpdir2=$(mktemp -d tmp.abc-script2.XXXXXXXXXX)
#BINDIR=${BINDIR:-/tmp/tmp/bin}

PROG=tmate
PROGtimeout=${PROGtimeout:-21600}
# https://docs.travis-ci.com/user/customizing-the-build/#Build-Timeouts
#7200 2h, 14400 4h, 21600 6h,
#debuging 
PROGtimeout="30"
date -u

usage() {
  this=$1
  cat <<EOF
$this: download go binaries for tmate-io/tmate

Usage: $this [-b] bindir [-d] [tag]
  -L show full logs!
  ##-F run tmate in foreground!
  -T DISABLE run tmate in foreground!
  -b sets bindir or installation directory, Defaults to /tmp/bin
  -d turns on debug logging
  -D TMATE_log_DEBUG via -vvvv
  -x set -x
  -X set -x also in funktions
  -v set -v
  -V set -v also in funktions
   [tag] is a tag from
   https://github.com/tmate-io/tmate/releases
   If tag is missing, then the latest will be used.

 based on Code generated Generated by godownloader
  https://github.com/goreleaser/godownloader

EOF
  exit 2
}

parse_args() {
  #BINDIR is ./bin unless set be ENV
  # over-ridden by flag below
  ###BINDIR=${BINDIR:-./bin}
#  BINDIR=${BINDIR:-/tmp/tmp/bin}
  BINDIR=${BINDIR:-/tmp/bin}
  while getopts "b:LFDTdh?P:xXvV" arg; do
    case "$arg" in
      b) BINDIR="$OPTARG" ;;
      L) LOGS_NOT_MASKING="true" ;;
      #F) TMATE_foreground="true" ;;
      T) TMATE_foreground_DISABLE="true" ;;
      D) TMATE_log_DEBUG="-vvvv" ;;
      d) log_set_priority 10 ;;
      P) vsleeeptime="$2"; shift;;
      h | \?) usage "$0" ;;
      x) export SETx="set -x" ;;
      ##v) export SETv="set -v" ;;
      v) TMATE_log_DEBUG="-v$OPTARG " ;;
      X) export SETX="set -x" ;;
      V) export SETV="set -v" ;;
    esac
  done
  shift $((OPTIND - 1))
  TAG=$1
  tmpARGs="$TMATE_log_DEBUG"
}

vsleep_old () {
countdown="$1"
while :
do
    echo "${countdown:-0}       \c"
    if [ "$countdown" -gt 0 ]
    then countdown=`expr $countdown - 1`
    else exit 0
    fi
    sleep 1
done
}

vsleep_rc () {
countdown="$1"
while :
do
    printf "%b" "${countdown:-0}\r\c"
    if [ "$countdown" -gt 0 ]
    then countdown=`expr $countdown - 1`
    else exit 0
    fi
    sleep 1
done
}

vsleep_r () {
countdown="$1"
while :
do
    printf "%b" "${countdown:-0}\r"
    printf "%b" "${countdown:-0}\n"
    if [ "$countdown" -gt 0 ]
    then countdown=`expr $countdown - 1`
    else exit 0
    fi
    sleep 1
done
}

vsleep () {
countdown="$1"
while :
do
    #printf "%b" "${countdown:-0}\n"
    printf "%b" "${countdown:-0} \n\c"
    if [ "$countdown" -gt 1 ]
    then countdown=`expr $countdown - 1`
    else exit 0
    #else return 0
    fi
    sleep 1
done
exit 0;
}

vsleep_kill () {
# https://www.cyberciti.biz/faq/linux-run-a-command-with-a-time-limit/
countdown="$1"
prog="$2"
while :
do
#set -vx
    #printf "%b" "${countdown:-0}\n"
    printf "%b" "${countdown:-0} \n\c"
    if [ "$countdown" -gt 1 ]
    then countdown=`expr $countdown - 1`
    else 
    pgrep $PROG 
	kill $(pgrep $PROG); 
	kill -13 $(pgrep $PROG); 
	kill -9 $(pgrep $PROG)
	exit 0
    #else return 0
    fi
    sleep 1
done
exit 0;
}


# this function wraps all the destructive operations
# if a curl|bash cuts off the end of the script due to
# network, either nothing will happen or will syntax error
# out preventing half-done work
execute() {
  #tmpdir=$(mktemp -d)
  tmpdir=$(mktemp -d -t tmp.abc-script-execute.XXXXXXXXXX)
  trap "rm -fr $tmpdir" 0 1 2 3 15
  log_debug "downloading files into ${tmpdir}"
  http_download "${tmpdir}/${TARBALL}" "${TARBALL_URL}"
#SKIP#  http_download "${tmpdir}/${CHECKSUM}" "${CHECKSUM_URL}"
#SKIP#  hash_sha256_verify "${tmpdir}/${TARBALL}" "${tmpdir}/${CHECKSUM}"
  srcdir="${tmpdir}/${NAME}"
  rm -rf "${srcdir}"
  (cd "${tmpdir}" && untar "${TARBALL}")
  test ! -d "${BINDIR}" && install -d "${BINDIR}"
  for binexe in $BINARIES; do
    if [ "$OS" = "windows" ]; then
      binexe="${binexe}.exe"
    fi
    install "${srcdir}/${binexe}" "${BINDIR}/"
    log_info "installed ${BINDIR}/${binexe}"
  done
  rm -rf "${tmpdir}"
}
get_binaries() {
  case "$PLATFORM" in
    #darwin/amd64) BINARIES="gometalinter gocyclo nakedret misspell gosec golint ineffassign goconst errcheck maligned unconvert dupl structcheck varcheck safesql deadcode lll goimports gotype staticcheck interfacer unparam gochecknoinits gochecknoglobals" ;;
    darwin/amd64) BINARIES="$BINARY" ;;
    darwin/arm64) BINARIES="$BINARY" ;;
    darwin/i386) BINARIES="$BINARY" ;;
    darwin/ppc64le) BINARIES="$BINARY" ;;
    freebsd/amd64) BINARIES="$BINARY" ;;
    freebsd/arm64) BINARIES="$BINARY" ;;
    freebsd/i386) BINARIES="$BINARY" ;;
    freebsd/ppc64le) BINARIES="$BINARY" ;;
    linux/amd64) BINARIES="$BINARY" ;;
    linux/arm64) BINARIES="$BINARY" ;;
    linux/arm64*) BINARIES="$BINARY" ;;
    linux/armv7*) BINARIES="$BINARY" ;;
    linux/armv6*) BINARIES="$BINARY" ;;
    linux/i386) BINARIES="$BINARY" ;;
    linux/ppc64le) BINARIES="$BINARY" ;;
    netbsd/amd64) BINARIES="$BINARY" ;;
    netbsd/arm64) BINARIES="$BINARY" ;;
    netbsd/i386) BINARIES="$BINARY" ;;
    netbsd/ppc64le) BINARIES="$BINARY" ;;
    openbsd/amd64) BINARIES="$BINARY" ;;
    openbsd/arm64) BINARIES="$BINARY" ;;
    openbsd/i386) BINARIES="$BINARY" ;;
    openbsd/ppc64le) BINARIES="$BINARY" ;;
    windows/amd64) BINARIES="$BINARY" ;;
    windows/arm64) BINARIES="$BINARY" ;;
    windows/i386) BINARIES="$BINARY" ;;
    windows/ppc64le) BINARIES="$BINARY" ;;
    *)
      log_crit "platform $PLATFORM is not supported.  Make sure this script is up-to-date and file request at https://github.com/${PREFIX}/issues/new"
      exit 1
      ;;
  esac
}
tag_to_version() {
  if [ -z "${TAG}" ]; then
    log_info "checking GitHub for latest tag"
  else
    log_info "checking GitHub for tag '${TAG}'"
  fi
  REALTAG=$(github_release "$OWNER/$REPO" "${TAG}") && true
  if test -z "$REALTAG"; then
    log_crit "unable to find '${TAG}' - use 'latest' or see https://github.com/${PREFIX}/releases for details"
    exit 1
  fi
  # if version starts with 'v', remove it
  TAG="$REALTAG"
  VERSION=${TAG#v}
}
adjust_format() {
  # change format (tar.gz or zip) based on OS
  case ${OS} in
    windows) FORMAT=zip ;;
  esac
  true
}
adjust_os() {
  # adjust archive name based on OS
  true
}
adjust_arch() {
  # adjust archive name based on ARCH
  true
}

cat /dev/null <<EOF
------------------------------------------------------------------------
https://github.com/client9/shlib - portable posix shell functions
Public domain - http://unlicense.org
https://github.com/client9/shlib/blob/master/LICENSE.md
but credit (and pull requests) appreciated.
------------------------------------------------------------------------
EOF
is_command() {
  command -v "$1" >/dev/null
}
echoerr() {
  echo "$@" 1>&2
}
log_prefix() {
  echo "$0"
}
_logp=6
log_set_priority() {
  _logp="$1"
}
log_priority() {
  if test -z "$1"; then
    echo "$_logp"
    return
  fi
  [ "$1" -le "$_logp" ]
}
log_tag() {
  case $1 in
    0) echo "emerg" ;;
    1) echo "alert" ;;
    2) echo "crit" ;;
    3) echo "err" ;;
    4) echo "warning" ;;
    5) echo "notice" ;;
    6) echo "info" ;;
    7) echo "debug" ;;
    *) echo "$1" ;;
  esac
}
log_debug() {
  log_priority 7 || return 0
  echoerr "$(log_prefix)" "$(log_tag 7)" "$@"
}
log_info() {
  log_priority 6 || return 0
  echoerr "$(log_prefix)" "$(log_tag 6)" "$@"
}
log_err() {
  log_priority 3 || return 0
  echoerr "$(log_prefix)" "$(log_tag 3)" "$@"
}
log_crit() {
  log_priority 2 || return 0
  echoerr "$(log_prefix)" "$(log_tag 2)" "$@"
}
uname_os() {
  os=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "$os" in
    msys_nt) os="windows" ;;
  esac
  echo "$os"
}
uname_arch_tar() {
  arch_tar=$(uname -m)
  case $arch_tar in
    x86_64) arch_tar="amd64" ;;
    x86) arch_tar="i386" ;;
    i686) arch_tar="i386" ;;
    i386) arch_tar="i386" ;;
    aarch64) arch_tar="arm64v8" ;;
    armv5*) arch_tar="arm32v5" ;;
    armv6*) arch_tar="arm32v6" ;;
    armv7*) arch_tar="arm32v7" ;;
  esac
  echo ${arch_tar}
}
uname_arch() {
  arch=$(uname -m)
  case $arch in
    x86_64) arch="amd64" ;;
    x86) arch="386" ;;
    i686) arch="386" ;;
    i386) arch="386" ;;
    aarch64) arch="arm64" ;;
    armv5*) arch="armv5" ;;
    armv6*) arch="armv6" ;;
    armv7*) arch="armv7" ;;
  esac
  echo ${arch}
}
uname_os_check() {
  os=$(uname_os)
  case "$os" in
    darwin) return 0 ;;
    dragonfly) return 0 ;;
    freebsd) return 0 ;;
    linux) return 0 ;;
    android) return 0 ;;
    nacl) return 0 ;;
    netbsd) return 0 ;;
    openbsd) return 0 ;;
    plan9) return 0 ;;
    solaris) return 0 ;;
    windows) return 0 ;;
  esac
  log_crit "uname_os_check '$(uname -s)' got converted to '$os' which is not a GOOS value. Please file bug at https://github.com/client9/shlib"
  return 1
}
uname_arch_check() {
  arch=$(uname_arch)
  case "$arch" in
    386) return 0 ;;
    amd64) return 0 ;;
    arm64) return 0 ;;
    armv5) return 0 ;;
    armv6) return 0 ;;
    armv7) return 0 ;;
    ppc64) return 0 ;;
    ppc64le) return 0 ;;
    mips) return 0 ;;
    mipsle) return 0 ;;
    mips64) return 0 ;;
    mips64le) return 0 ;;
    s390x) return 0 ;;
    amd64p32) return 0 ;;
  esac
  log_crit "uname_arch_check '$(uname -m)' got converted to '$arch' which is not a GOARCH value.  Please file bug report at https://github.com/client9/shlib"
  return 1
}
untar() {
  tarball=$1
  case "${tarball}" in
    *.tar.gz | *.tgz) tar -xzf "${tarball}" ;;
    *.tar.xz | *.txz) tar -xJf "${tarball}" ;;
    *.tar) tar -xf "${tarball}" ;;
    *.zip) unzip "${tarball}" ;;
    *)
      log_err "untar unknown archive format for ${tarball}"
      return 1
      ;;
  esac
}
http_download_curl() {
  local_file=$1
  source_url=$2
  header=$3
  if [ -z "$header" ]; then
    code=$(curl -w '%{http_code}' -sL -o "$local_file" "$source_url")
  else
    code=$(curl -w '%{http_code}' -sL -H "$header" -o "$local_file" "$source_url")
  fi
  if [ "$code" != "200" ]; then
    log_debug "http_download_curl received HTTP status $code"
    return 1
  fi
  return 0
}
http_download_wget() {
  local_file=$1
  source_url=$2
  header=$3
  if [ -z "$header" ]; then
    wget -q -O "$local_file" "$source_url"
  else
    wget -q --header "$header" -O "$local_file" "$source_url"
  fi
}
http_download() {
  log_debug "http_download $2"
  if is_command curl; then
    http_download_curl "$@"
    return
  elif is_command wget; then
    http_download_wget "$@"
    return
  fi
  log_crit "http_download unable to find wget or curl"
  return 1
}
http_copy() {
  tmp=$(mktemp)
  trap "rm -fr ${tmp}" 0 2 3 15
  http_download "${tmp}" "$1" "$2" || return 1
  body=$(cat "$tmp")
  rm -f "${tmp}"
  echo "$body"
}
github_release() {
  owner_repo=$1
  version=$2
  test -z "$version" && version="latest"
  giturl="https://github.com/${owner_repo}/releases/${version}"
  json=$(http_copy "$giturl" "Accept:application/json")
  test -z "$json" && return 1
  version=$(echo "$json" | tr -s '\n' ' ' | sed 's/.*"tag_name":"//' | sed 's/".*//')
  test -z "$version" && return 1
  echo "$version"
}
hash_sha256() {
  TARGET=${1:-/dev/stdin}
  if is_command gsha256sum; then
    hash=$(gsha256sum "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command sha256sum; then
    hash=$(sha256sum "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command shasum; then
    hash=$(shasum -a 256 "$TARGET" 2>/dev/null) || return 1
    echo "$hash" | cut -d ' ' -f 1
  elif is_command openssl; then
    hash=$(openssl -dst openssl dgst -sha256 "$TARGET") || return 1
    echo "$hash" | cut -d ' ' -f a
  else
    log_crit "hash_sha256 unable to find command to compute sha-256 hash"
    return 1
  fi
}
hash_sha256_verify() {
  TARGET=$1
  checksums=$2
  if [ -z "$checksums" ]; then
    log_err "hash_sha256_verify checksum file not specified in arg2"
    return 1
  fi
  BASENAME=${TARGET##*/}
  want=$(grep "${BASENAME}" "${checksums}" 2>/dev/null | tr '\t' ' ' | cut -d ' ' -f 1)
  if [ -z "$want" ]; then
    log_err "hash_sha256_verify unable to find checksum for '${TARGET}' in '${checksums}'"
    return 1
  fi
  got=$(hash_sha256 "$TARGET")
  if [ "$want" != "$got" ]; then
    log_err "hash_sha256_verify checksum for '$TARGET' did not verify ${want} vs $got"
    return 1
  fi
}
cat /dev/null <<EOF
------------------------------------------------------------------------
End of functions from https://github.com/client9/shlib
------------------------------------------------------------------------
EOF

PROJECT_NAME="tmate"
OWNER="tmate-io"
REPO="tmate"
BINARY=tmate
FORMAT=tar.xz
OS=$(uname_os)
ARCH=$(uname_arch)
ARCH_TAR=$(uname_arch_tar)
PREFIX="$OWNER/$REPO"

# use in logging routines
log_prefix() {
        echo "$PREFIX"
}
PLATFORM="${OS}/${ARCH}"
GITHUB_DOWNLOAD=https://github.com/${OWNER}/${REPO}/releases/download

uname_os_check "$OS"

uname_arch_check "$ARCH"
#uname_arch_tar "$ARCH_TAR"

parse_args "$@"
#set -vx
#eval $SETX
#eval $SETV
$SETx
$SETv

get_binaries

tag_to_version

adjust_format

adjust_os

adjust_arch

log_info "found version: ${VERSION} for ${TAG}/${OS}/${ARCH}"

#NAME=${BINARY}-${VERSION}-static-${OS}-${ARCH}
NAME=${BINARY}-${VERSION}-static-${OS}-${ARCH_TAR}
TARBALL=${NAME}.${FORMAT}
TARBALL_URL=${GITHUB_DOWNLOAD}/${TAG}/${TARBALL}
CHECKSUM=${TARBALL}.sha256sum
CHECKSUM_URL=${GITHUB_DOWNLOAD}/${TAG}/${CHECKSUM}

execute

### export CONTINUOUS_INTEGRATION=true

### if [ "$vsleeeptime" != "" ]
### then
### vsleep $vsleeeptime
### else
### vsleep 30
### fi


_tmpFILTER() {
#$SETX
#$SETV
if [ "$LOGS_NOT_MASKING" != "true" ]; then 
#progressFlag="--progress=plain"
	#tmpFILTER='sed 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**&**/g' | sed 's/web session.*/**&**/g' | sed 's/onnecting to.*/**&**/g' | sed 's/ssh session.*    /**&**/g' | sed '/\*\*.*\\*\*/s//**masked**/''A
	#tmpFILTER='sed s/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**&**/g s/web.*session.*/**&**/g s/onnecting to.*/**&**/g s/ssh.*session.*/**&**/g /\*\*.*\\*\*/s//**masked**/'
	#sed s/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**&**/g s/web.*session.*/**&**/g s/onnecting to.*/**&**/g s/ssh.*session.*/**&**/g /\*\*.*\\*\*/s//**masked**/
#	sed -e 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**&**/g' | sed -e 's/web session.*/**&**/g' | sed -e 's/onnecting to.*/**&**/g' | sed -e 's/ssh session.*    /**&**/g' | sed -e '/\*\*.*\\*\*/s//**masked**/'
  while read data; do
      #printf "%s" "$data" | sed -e 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**&**/g' | sed -e 's/web session.*/**&**/g' | sed -e 's/onnecting to.*/**&**/g' | sed -e 's/ssh session.*    /**&**/g' | sed -e '/\*\*.*\\*\*/s//**masked**/'
#working# printf "%s" "$data" | sed -e 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**&**/g' \
 #working# -e 's/web session.*/**&**/g' -e 's/onnecting to.*/**&**/g' -e 's/ssh session.*/**&**/g' -e '/\*\*.*\\*\*/s//**masked**/'
 
# https://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses#
printf "%s" "$data" | sed -e 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**&**/g' \
 -e 's/web session.*/**&**/g' -e 's/onnecting to.*/**&**/g' -e 's/ssh session.*/**&**/g' \
 -e 's/(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/**&**/g' \
 -e '/\*\*.*\\*\*/s//**masked**/'
	  printf "%b" "\n"
  done
else
#	progressFlag="--progress=plain"
#	tmpFILTER="tee"
#	tee
  while read data; do
      printf "%s" "$data"
	  printf "%b" "\n"
  done
fi
#tmpFILTER='sed 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**&**/g' | sed 's/web session.*/**&**/g' | sed 's/onnecting to.*/**&**/g' | sed 's/ssh session.*/**&**/g' | sed '/\*\*.*\\*\*/s//**masked**/''
}

#tmpdir1=${tmpdir1:-$(mktemp -d -t tmp.abc-script1.XXXXXXXXXX)}
#tmpdir2=${tmpdir2:-$(mktemp -d -t tmp.abc-script2.XXXXXXXXXX)}
###tmpfileCONFIGfile=${tmpfileCONFIGfile:-$(mktemp --tmpdir=$tmpdir2 abc-script.config.XXXXXXXXXX)}
tmpfileCONFIGfile=${tmpfileCONFIGfile:-$(mktemp -t abc-script.config.XXXXXXXXXX)}
#trap "rm -fr ${tmpfileCONFIGfile}" 0 2 3 15

  trap '{
    # this block gets called before exit
set -vx
rm -rf "${tmpdir}" ||:
rm -rf "${tmpdir}" ||:
rm -rf "${tmpdir1}" ||:
rm -rf "${tmpdir2}" ||:
rm -rf "${tmpfile}" ||:
rm -rf "${tmpfile1}" ||:
rm -rf "${tmpfile2}" ||:
rm -rf "${tmpfile3}" ||:
rm -fr ${tmpfileCONFIGfile} ||:
#    rm -fr $tmpdir2 ||:
rm ${BINDIR}/tmate ||:
exit
    }' 0 1 2 3 15




#tmpfileCONFIGfile=$(mktemp abc-script.XXXXXX)
#mktemp --tmpdir=$tmpdir2 tmp.abc-script.XXXXXXXXXX
#"${tmp}"
  tmpfileCONFIG="-f $tmpfileCONFIGfile"
  #echo "'set -g terminal-overrides \"xterm*:kLFT5=\eOD:kRIT5=\eOC:kUP5=\eOA:kDN5=\eOB:smkx@:rmkx@\"" >> $tmpfileCONFIGfile
  #echo 'set tmate-display-time "10"' >> $tmpfileCONFIGfile
  #echo 'set tmate-foreground-restart "0"' >> $tmpfileCONFIGfile
  # .name = "tmate-foreground-restart", .minimum = 0, .maximum = 1, .default_num = 1
###  echo 'set tmate-display-time "10"' >> $tmpfileCONFIGfile
###echo 'tmate-display-time "10"' >> $tmpfileCONFIGfile
  # .name = tmate-display-time .scope = OPTIONS_TABLE_SESSION, .minimum = 1, .maximum = INT_MAX, .default_num = 15000
  #echo 'set tmate-api-key "API_KEY"' >> $tmpfileCONFIGfile
  #echo 'set tmate-session-name "session-name"' >> $tmpfileCONFIGfile
  echo 'set -g terminal-overrides "xterm*:kLFT5=\eOD:kRIT5=\eOC:kUP5=\eOA:kDN5=\eOB:smkx@:rmkx@"' >> $tmpfileCONFIGfile
# echo 'set -g terminal-overrides "xterm*:kLFT5=\eOD:kRIT5=\eOC:kUP5=\eOA:kDN5=\eOB:smkx@:rmkx@"' >> ~/.tmate.conf
# echo "source-file ~/.tmux.conf" >> ~/.tmate.conf

###ifdef TMATE
#tmate-identity
#.type = OPTIONS_TABLE_STRING,
# .default_str = ""
#tmate-server-host
# .default_str = "ssh.tmate.io"
#tmate-server-port
#.type = OPTIONS_TABLE_NUMBER,
# .minimum = 1,
# .maximum = 65535,
# .default_num = 22

#tmate-server-dsa-fingerprint
#  .type = OPTIONS_TABLE_STRING,
#	  .default_str = "obsolete"

#tmate-server-rsa-fingerprint",
#.type = OPTIONS_TABLE_STRING,
#.default_str = "SHA256:Hthk2T/M/Ivqfk1YYUn5ijC2Att3+UPzD7Rn72P5VWs"

#tmate-server-ecdsa-fingerprint
# .type = OPTIONS_TABLE_STRING,
# .scope = OPTIONS_TABLE_SERVER,
# .default_str = "SHA256:8GmKHYHEJ6n0TEdciHeEGkKOigQfCFuBULdt6vZIhDc"

# tmate-server-ed25519-fingerprint
# .type = OPTIONS_TABLE_STRING,
# .scope = OPTIONS_TABLE_SERVER,
# .default_str = "SHA256:jfttvoypkHiQYUqUCwKeqd9d1fJj/ZiQlFOHVl6E9sI"

#tmate-display-time
# .type = OPTIONS_TABLE_NUMBER,
# .scope = OPTIONS_TABLE_SESSION,
# .minimum = 1,
# .maximum = INT_MAX,
# .default_num = 15000

#tmate-webhook-userdata
#.type = OPTIONS_TABLE_STRING,
#.scope = OPTIONS_TABLE_SERVER,
#.default_str = ""

#tmate-webhook-url
# .type = OPTIONS_TABLE_STRING,
# .scope = OPTIONS_TABLE_SERVER,
# .default_str = ""

# .name = "tmate-api-key",
# .type = OPTIONS_TABLE_STRING,
# .scope = OPTIONS_TABLE_SERVER,
# .default_str = ""

# .name = "tmate-session-name",
# .type = OPTIONS_TABLE_STRING,
# .scope = OPTIONS_TABLE_SERVER,
#	  .default_str = ""


#.name = "tmate-session-name-ro",
#	  .type = OPTIONS_TABLE_STRING,
#	  .scope = OPTIONS_TABLE_SERVER,
#	  .default_str = ""

# .name = "tmate-authorized-keys",
#	  .type = OPTIONS_TABLE_STRING,
#	  .scope = OPTIONS_TABLE_SERVER,
#	  .default_str = ""

# .name = "tmate-set",
# .type = OPTIONS_TABLE_STRING,
# .scope = OPTIONS_TABLE_SERVER,
# .default_str = ""

# .name = "tmate-foreground-restart",
# .type = OPTIONS_TABLE_NUMBER,
# .scope = OPTIONS_TABLE_SERVER,
# .minimum = 0,
# .maximum = 1,
# .default_num = 1


execute_auto_setup() {
$SETX
$SETV
  ###tmpdir=$(mktemp -d)
  ###trap "rm -fr ${tmpdir}" 0 1 2 3 15
  log_debug "downloading files into ${tmpdir}"
  #http_download "${tmpdir}/${TARBALL}" "${TARBALL_URL}"
#SKIP#  http_download "${tmpdir}/${CHECKSUM}" "${CHECKSUM_URL}"
#SKIP#  hash_sha256_verify "${tmpdir}/${TARBALL}" "${tmpdir}/${CHECKSUM}"
  #srcdir="${tmpdir}/${NAME}"
  #rm -rf "${srcdir}"
  #(cd "${tmpdir}" && untar "${TARBALL}")
  #test ! -d "${BINDIR}" && install -d "${BINDIR}"
  #for binexe in $BINARIES; do
  #  if [ "$OS" = "windows" ]; then
  #    binexe="${binexe}.exe"
  #  fi
  #  install "${srcdir}/${binexe}" "${BINDIR}/"
  #  log_info "installed ${BINDIR}/${binexe}"
  #done
  #rm -rf "${tmpdir}"
  #tmpdir2=$(mktemp -d)
  ###tmpdir2=${tmpdir2:-$(mktemp -d -t tmp.abc-script2.XXXXXXXXXX)}
  ###trap "rm -fr $tmpdir2" 0 2 3 15
#  tmpfile=$(mktemp --tmpdir=$tmpdir2 abc-script.XXXXXX)
#  tmpfile2=$(mktemp --tmpdir=$tmpdir2 abc-script.XXXXXX)
  tmpfile=$(mktemp --tmpdir=$tmpdir2 tmp.abc-script.eas.XXXXXXXXXX)
  tmpfile2=$(mktemp --tmpdir=$tmpdir2 tmp.abc-script2.eas.XXXXXXXXXX)
 # https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script/181938#181938
 ###exec 3>"$tmpfile"
 ###rm "$tmpfile" ||:
TMATEauthorizedkeysfile=$tmpfile2
echo "$TMATEauthorizedkeys" >> $TMATEauthorizedkeysfile


#debugnull
#tmate $tmpfileCONFIG -k tmk-jPa7GdgslQuqt4PAOHxQRAyJTe -n testname -F 
##TMPsession=$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | tr -d [:space:]- )
##TMATEsession=${TMATEsession:-$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | tr -d [:space:]- )}

TMATEapikey=${TMATEapikey:-tmk-jPa7GdgslQuqt4PAOHxQRAyJTe}
TMATEsession=${TMATEsession:-$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | cut -b-50 )}
echo foooooooooooooooooo
echo $0
###${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession || ${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession -F | _tmpFILTER
${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession 
#${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -a $TMATEauthorizedkeysfile -k $TMATEapikey -n $TMATEsession

rm -rf "${tmpdir}" ||:
rm -rf "${tmpdir1}" ||:
rm -rf "${tmpdir2}" ||:
#rm -fr /tmp/*abc-script* /tmp/tmate* ||:
###echo foo >&3
}

execute_auto_setup_timeout() {
$SETX
$SETV
PROG=tmate
  #7200 2h, 14400 4h, 21600 6h,
PROGtimeout=${PROGtimeout:-21600}
 ## tmpdir=$(mktemp -d)
 ## trap "rm -fr ${tmpdir}" 0 2 3 15
  log_debug "downloading files into ${tmpdir}"
  ###tmpdir2=${tmpdir2:-$(mktemp -d -t tmp.abc-script2.XXXXXXXXXX)}
  ###trap "rm -fr ${tmpdir2}" 0 2 3 15
 # https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script/181938#181938
  tmpfile=$(mktemp --tmpdir=$tmpdir2 tmp.abc-script.XXXXXXXXXX)
  ###trap "rm -fr ${tmpfile}" 0 1 2 3 15
  tmpfile2=$(mktemp --tmpdir=$tmpdir2 tmp.abc-script.XXXXXXXXXX)
  ###trap "rm -fr ${tmpfile2}" 0 1 2 3 15
#+++ exec 3>"$tmpfile"
#+++ rm "$tmpfile" ||:
TMATEauthorizedkeysfile="$tmpfile2"
echo "$TMATEauthorizedkeys" >> "$TMATEauthorizedkeysfile"

TMATEapikey=${TMATEapikey:-tmk-jPa7GdgslQuqt4PAOHxQRAyJTe}
TMATEsession=${TMATEsession:-$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | cut -b-50 )}
echo foooooooooooooooooo
echo $0
###${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession || ${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession -F | _tmpFILTER
#${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -a $TMATEauthorizedkeysfile -k $TMATEapikey -n $TMATEsession

#( (vsleep $PROGtimeout; pgrep -x $PROG && kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG)) & # kill quickly if trapped
( (sleep $PROGtimeout; pgrep -x $PROG && kill $(pgrep -x $PROG); pgrep -x $PROG && kill -13 $(pgrep -x $PROG); pgrep -x $PROG && kill -9 $(pgrep -x $PROG) )  & # kill quickly if trapped
                ${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession  )
                #${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession -F | _tmpFILTER )
#            echo "dns-sd -B _rfb._tcp")

# kill dns-sd child process
pgrep -x $PROG && kill $(pgrep -x $PROG); pgrep -x $PROG && kill -13 $(pgrep -x $PROG)


rm -rf "${tmpdir}" ||:
rm -rf "${tmpdir2}" ||:
rm -rf "${tmpfile}" ||:
rm -rf "${tmpfile2}" ||:
#+++ echo foo >&3
}


execute_auto_setup_foreground() {
$SETX
$SETV
  PROG=tmate
  #7200 2h, 14400 4h, 21600 6h,
  PROGtimeout=${PROGtimeout:-21600}
  ###tmpdir=$(mktemp -d)
  log_debug "downloading files into ${tmpdir}"
  ###tmpdir2=$(mktemp -d tmp.abc-script.XXXXXXXXXX)
  #trap "rm -fr $tmpdir2" 0 2 3 15
 # trap '{
 #   # this block gets called before exit
 #   rm -fr $tmpdir2
 #   pgrep -x $PROG && kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG)
 #  # ps -Aocomm=,pid=,etime= | sed -ne "s/^$PROG  *//p"
 #  kill $(ps -Aocomm=,pid= | sed -ne "s/^$PROG  *//p") 
 #  kill -9 $(ps -Aocomm=,pid= | sed -ne "s/^$PROG  *//p")
 #   }' 0 2 3 15
  tmpfile=$(mktemp --tmpdir=$tmpdir2 tmp.abc-script.XXXXXXXXXX)
  tmpfile2=$(mktemp --tmpdir=$tmpdir2 tmp.abc-script.XXXXXXXXXX)
 # https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script/181938#181938
 ###exec 3>"$tmpfile"
 rm "$tmpfile" ||:
TMATEauthorizedkeysfile=$tmpfile2
echo "$TMATEauthorizedkeys" >> $TMATEauthorizedkeysfile

TMATEapikey=${TMATEapikey:-tmk-jPa7GdgslQuqt4PAOHxQRAyJTe}
TMATEsession=${TMATEsession:-$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | cut -b-50 )}

echo foooooooooooooooooo
echo $0

out=(); i=0
while read -r line; do
    i=`expr $i + 1`
    if [ $i -lt 5 ]; then continue; fi # skip the header lines

    out+=("$line")
echo $line
    # break if no more items will follow (e.g. Flags != 3)
    if [ $(echo $line | cut -d ' ' -f 3) -ne '3' ]; then
        break
    fi
done < <((sleep $PROGtimeout; pgrep -x $PROG && kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG)) & # kill quickly if trapped
		${BINDIR}./tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession -F | _tmpFILTER )
#            echo "dns-sd -B _rfb._tcp")

# kill dns-sd child process
pgrep -x $PROG && kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG)
###${BINDIR}./tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession -F | _tmpFILTER

rm -rf "${tmpdir}" ||:
rm -rf "${tmpdir2}" ||:
#rm -fr /tmp/*abc-script* /tmp/*tmate* ||:
####echo foo >&3
}


execute_auto_setup_foreground_timeout() {
$SETX
$SETV
  PROG=tmate
  #7200 2h, 14400 4h, 21600 6h,
  PROGtimeout=${PROGtimeout:-21600}
###  tmpdir=$(mktemp -d -t abc-script.easft.XXXXXX)
  #trap "rm -fr $tmpdir" 0 2 3 15
  log_debug "downloading files into ${tmpdir}"
###  tmpdir2=$(mktemp -d -t abc-script2.easft.XXXXXX)
  #trap "rm -fr $tmpdir2" 0 2 3 15

  tmpfile=$(mktemp --tmpdir=$tmpdir2 abc-script.XXXXXX)
  tmpfile2=$(mktemp --tmpdir=$tmpdir2 abc-script2.XXXXXX)
 # https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script/181938#181938
 ####exec 3>"$tmpfile"
 rm "$tmpfile" ||:
TMATEauthorizedkeysfile=$tmpfile2
echo "$TMATEauthorizedkeys" >> $TMATEauthorizedkeysfile

TMATEapikey=${TMATEapikey:-tmk-jPa7GdgslQuqt4PAOHxQRAyJTe}
TMATEsession=${TMATEsession:-$(echo $TMATEapikey$(date -u +%F%H) | sha256sum | cut -b-50 )}

#( (sleep $PROGtimeout; pgrep -x $PROG && kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG)) & # kill quickly if trapped
#( (vsleep $PROGtimeout; pgrep $PROG && ( kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG) ) ) & # kill quickly if trapped
echo foooooooooooooooooo
echo $0
#( ( vsleep $PROGtimeout; pgrep $PROG && kill $(pgrep -x $PROG) ) & # kill quickly if trapped
###( ( vsleep $PROGtimeout; pgrep $PROG; kill $(pgrep -x $PROG ) ) & # kill quickly if trapped
###   ${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession -F | _tmpFILTER )
#( vsleep $PROGtimeout; pgrep $PROG; kill $(pgrep -x $PROG ) ) & # kill quickly if trapped
#(sleep $PROGtimeout; pgrep -x $PROG && kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG)) & # kill quickly if
( vsleep_kill $PROGtimeout $PROG; pgrep -x $PROG && kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG)) & # kill quickly if
   ${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession -F | _tmpFILTER
#            echo "dns-sd -B _rfb._tcp")

# kill dns-sd child process
pgrep $PROG && kill $(pgrep -x $PROG); kill -13 $(pgrep -x $PROG)
###${BINDIR}/tmate $tmpARGs $tmpfileCONFIG -k $TMATEapikey -n $TMATEsession -F | _tmpFILTER

rm -rf "${tmpdir}" ||:
rm -rf "${tmpdir2}" ||:
rm -rf "${tmpfile1}" ||:
rm -rf "${tmpfile2}" ||:
#rm -fr /tmp/*abc-script* /tmp/*tmate* ||:
#rm -fr /tmp/*abc-script* ||:
####echo foo >&3
}



if [ "$TMATE_foreground_DISABLE" = "true" ]; then 
#execute_auto_setup
execute_auto_setup_timeout
else
execute_auto_setup_foreground_timeout
fi

rm -rf "${tmpdir}" ||:
rm -rf "${tmpdir1}" ||:
rm -rf "${tmpdir2}" ||:
rm -rf "${tmpfile}" ||:
rm -rf "${tmpfile2}" ||:
rm -rf "${tmpfile3}" ||:
rm -fr /tmp/*abc-script* /tmp/*tmate* ${BINDIR}/tmate $tmpARGs "${$tmpfileCONFIG}" ||:
